schema{
    query: query
    mutation: Mutation
}

type Query{
    getBookById(bookId: ID!): Book! # the first query is called getBookById. It takes in a parameter called bookId of type ID! which is mandatory. It queries the Book type and must return a Book.
    # listBooks():[Books] 
    listBooks(limit: Int!, nextToken: String):BooksPage! # users should return an array of books. In prod, it would be impractical to retrun all books so we will return the type BooksPage where we have implemented pagination. This field takes in arguments for limit which is mandatory, and the nextToken. DynamoDB Scan and Query operations support pagination so when you use listBooks 

    myOrders(limit: Int!, nextToken: String): OrderItemsPage

}

type{
    OrderItems: [OrderItem]
    nextToken: String
}

type OrderItem{
    userId: ID! # we will return the order for a particular user. We will pass the Cognito token as the userId. All users will have to login and when they login it, they will receive a unique cognito token. So only logged in users can view their orders and can't view the orders of other users
    orderId: ID!
    book: Book!
    quantity: Int!
}

type BooksPage{ # this will return  a fixed number of books plus a token to be used for the next list.
    books: [Book]
    nextToken: String
}

type Book{
    bookId: ID!
    title: String!
    description: String
    imageUrl: AWSURL
    author: String!
    price: Float!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
}

type Mutation{
    createBook(newBook: BookInput): Book! @aws_auth(cognito_groups: ["Admin"]) #only users in the Admin cognito group can call this mutation to create a Book. it takes in an argument called newBook with a value of BookInput in order to create a Book.
    createOrder(newOrder: OrderInput): Boolean! #every user can create an order. 

}

type BookInput{ # createAt, UpdatedAt and ID will be generated by the backend
    title: String!
    description: String
    imageUrl: AWSURL
    author: String!
    price: Float!
}

type OrderInput{ #an order may include one or more books
    items: [OrderItemInput]

}

input OrderItemInput{ # this is a special type in GraphQL when you are passing in inputs
    bookId: ID!
    quantity: Int!
}