# Notes dynamoDB table
notesTable: # logical name for our DynamoDB table
  Type: AWS::DynamoDB::Table
  Properties:
    TableName: notes
    BillingMode: PAY_PER_REQUEST
    AttributeDefinitions:
      - AttributeName: notesId # this will be our hashkey
        AttributeType: S
    KeySchema:
      - AttributeName: notesId
        KeyType: HASH

# Cognito user pool
cognitoUserPool: # logical name for our cognito user pool
  Type: AWS::Cognito::UserPool
  Properties:
    UserPoolName: MyNotesUserPoolSls
# user pool web client. Many clients can connect to the same user pool for example you can add another client for mobile apps

# Cognito user pool client block
cognitoUserPoolWebClient: # logical name for our user pool client
  Type: AWS::Cognito::UserPoolClient
  Properties:
    UserPoolId: !Ref cognitoUserPool # This is a mandatory field. we will get the user pool id from the cognitoUserPool resource using the !Ref intrinsic function
    ClientName: webclientsls

# Cognito user pool domain block
cognitoUserPoolDomain:
  Type: AWS::Cognito::UserPoolDomain
  Properties:
    Domain: mynotesapisls # Required String. prefix name of the domain that hosts the signup and signin pages for your app. We will use the cognito provided domain. The domain has to be unique. The AWS console gave us a way to check if the name is unique. Note that name of the domain must follow the folling format: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?
    UserPoolId: !Ref cognitoUserPool # Required String. The user pool ID for the user pool where you want to associate a user pool domain. Once again, we will use the Ref intrinsic function
