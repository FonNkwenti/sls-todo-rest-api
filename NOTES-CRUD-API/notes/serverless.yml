service: notes-api
# frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  environment:
    NOTES_TABLE_NAME: !Ref notesTable

plugins:
  - serverless-iam-roles-per-function

#   - serverless-webpack

functions:
  authorizer: # the logical name of our custom lambda authorizer
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool # When you pass the logical ID of this resource to the intrinsic Ref function, Ref returns a generated ID, such as us-east-2_zgaEXAMPLE
      COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient # When you pass the logical ID of this resource to the intrinsic Ref function, Ref returns the Amazon Cognito user pool client ID, such as 1h57kf5cpq17m0eml12EXAMPLE.

  createNote:
    handler: handler.createNote
    events:
      - http:
          method: POST
          path: notes
          authorizer: authorizer #
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn

  updateNote:
    handler: handler.updateNote
    events:
      - http:
          method: PUT
          path: notes/{id} #wrapping the id in {} means it is a variable and the actual value is dynamic based on what the user passes
          authorizer: authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn

  deleteNote:
    handler: handler.deleteNote
    events:
      - http:
          method: DELETE
          path: notes/{id}
          authorizer: authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn

  getAllNotes:
    handler: handler.getAllNotes
    events:
      - http:
          method: GET
          path: notes
          # authorizer: authorizer # lambda authorizer function
          authorizer:
            name: userpool_authorizer # cognito authorizer
            # arn: arn:aws:cognito-idp:us-east-1:404148889442:userpool/us-east-1_cilW6Plk9 # get the arn from the cognito console.
            arn: !GetAtt cognitoUserPool.Arn # same as above but using the GetAtt intrinsic function to get the value of the user pool ARN
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt notesTable.Arn
# you can add CloudFormation resource templates here
resources:
  Resources: ${file(resources.yml)} # using the serverless framework file method to import the resources.yml file where we will define all of our resources

custom:
  bundle:
    linting: false
