service: notes-api
# frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  environment:
    NOTES_TABLE_NAME: !Ref notesTable

plugins:
  - serverless-iam-roles-per-function

#   - serverless-webpack

functions:
  createNote:
    handler: handler.createNote
    events:
      - http:
          method: POST
          path: notes
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn

  updateNote:
    handler: handler.updateNote
    events:
      - http:
          method: PUT
          path: notes/{id} #wrapping the id in {} means it is a variable and the actual value is dynamic based on what the user passes
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn

  deleteNote:
    handler: handler.deleteNote
    events:
      - http:
          method: DELETE
          path: notes/{id}
  getAllNotes:
    handler: handler.getAllNotes
    events:
      - http:
          method: GET
          path: notes
# you can add CloudFormation resource templates here
resources:
  Resources:
    notesTable: # logical name for our DynamoDB table
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: notesId # this will be our hashkey
            AttributeType: S
        KeySchema:
          - AttributeName: notesId
            KeyType: HASH

custom:
  bundle:
    linting: false
